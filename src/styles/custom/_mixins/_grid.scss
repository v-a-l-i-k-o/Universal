/* ===== GRID ===== */
// Defaults which you can freely override
$column-width: 80;
$columns: 12;
$gutter: 0;

// Utility variable â€” you should never need to modify this
// $gridsystem-width: ($column-width*$columns) * 1px;
$gridsystem-width: ($column-width*$columns);

// Set $total-width to 100% for a fluid layout
//$total-width: $gridsystem-width;
$total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
$min-width: 960;
$correction: .5 / $min-width * 100 * 1%;

@mixin clearfix(){
  *zoom: 1;

  &:before,
  &:after {
	  content: '';
	  display: table;
	}
  &:after {
	  clear: both;
	}
}

body {
  width: 100%;
  @include clearfix;
}

@mixin row($columns:$columns){
  @include clearfix;
  display: block;
  margin: 0 $total-width*(($gutter / $gridsystem-width)*-1);
  *margin: 0 $total-width*(($gutter / $gridsystem-width)*-1)-$correction;
}

@mixin col__f($x,$columns:$columns){
  float: left;
  *display: inline;
  position: relative;
  display: inline-block;
  padding: 0 $total-width*($gutter / $gridsystem-width);
  width: $total-width*(($column-width*$x) / $gridsystem-width);
  *width: $total-width*(($column-width*$x) / $gridsystem-width)-$correction;
}

@mixin col($x,$columns:$columns){
  *display: inline;
  position: relative;
  vertical-align: top;
  display: inline-block;
  padding: 0 $total-width*($gutter / $gridsystem-width);
  width: $total-width*(($column-width*$x) / $gridsystem-width);
  *width: $total-width*(($column-width*$x) / $gridsystem-width)-$correction;
}

@mixin push($offset:1) {
  left: $total-width*(($column-width*$offset) / $gridsystem-width);
}

@mixin pull($offset:1) {
  right: $total-width*(($column-width*$offset) / $gridsystem-width);
}

@mixin offset($offset:1) {
  margin-left: $total-width*(($column-width*$offset) / $gridsystem-width);
}